
[tkim058]_lab[5]_part[1].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000022e  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800104  00800104  000002c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000998  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085c  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000349  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048f  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e2       	ldi	r30, 0x2E	; 46
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9f d0       	rcall	.+318    	; 0x202 <main>
  c4:	b2 c0       	rjmp	.+356    	; 0x22a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
  fc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 100:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 104:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

//In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
 122:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
 126:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
 12e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 13c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 140:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 144:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0)
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <TimerFlag>
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
	if(_avr_timer_cntcurr == 0)
	{
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 166:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 16a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 172:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

//Set TimerISR() to tick every M ms
void TimerSet(unsigned long M)
{
	_avr_timer_M = M;
 188:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 18c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_cntcurr>
 19c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr+0x2>
 1a4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <Tick>:

unsigned char tmpB = 0x00;

void Tick()
{
	switch(state)
 1aa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <Tick+0x1c>
 1b2:	28 f0       	brcs	.+10     	; 0x1be <Tick+0x14>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	59 f0       	breq	.+22     	; 0x1ce <Tick+0x24>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	69 f0       	breq	.+26     	; 0x1d6 <Tick+0x2c>
 1bc:	10 c0       	rjmp	.+32     	; 0x1de <Tick+0x34>
	{//state transition
		case Init:
		state = B0_on;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		break;
 1c4:	12 c0       	rjmp	.+36     	; 0x1ea <Tick+0x40>
		
		case B0_on:
		state = B1_on;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 1cc:	12 c0       	rjmp	.+36     	; 0x1f2 <Tick+0x48>
		break;
		
		case B1_on:
		state = B2_on;
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 1d4:	12 c0       	rjmp	.+36     	; 0x1fa <Tick+0x50>
		break;
		
		case B2_on:
		state = B0_on;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		break;
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <Tick+0x40>
		
		default:
		break;
	}
	
	switch(state)
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	41 f0       	breq	.+16     	; 0x1f2 <Tick+0x48>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	51 f0       	breq	.+20     	; 0x1fa <Tick+0x50>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	59 f4       	brne	.+22     	; 0x200 <Tick+0x56>
	{//state action
		case Init:
		break;
		
		case B0_on:
		tmpB = 0x01;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		break;
 1f0:	08 95       	ret
		
		case B1_on:
		tmpB = 0x02;
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		break;
 1f8:	08 95       	ret
		
		case B2_on:
		tmpB = 0x04;
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 200:	08 95       	ret

00000202 <main>:
}


int main()
{
	DDRB = 0xFF;
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 206:	15 b8       	out	0x05, r1	; 5
	TimerSet(1000);	//Timer Period = 1000ms
 208:	68 ee       	ldi	r22, 0xE8	; 232
 20a:	73 e0       	ldi	r23, 0x03	; 3
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	bb df       	rcall	.-138    	; 0x188 <TimerSet>
	TimerOn();		//Turn Timer ON
 212:	5a df       	rcall	.-332    	; 0xc8 <TimerOn>
	while (1)
	{
		//User code (i.e. synchSM calls)
		Tick();
 214:	ca df       	rcall	.-108    	; 0x1aa <Tick>
 216:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
		PORTB = tmpB;
 21a:	85 b9       	out	0x05, r24	; 5
 21c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <TimerFlag>
		while (!TimerFlag);	//wait 1 sec
 220:	88 23       	and	r24, r24
 222:	e1 f3       	breq	.-8      	; 0x21c <main+0x1a>
 224:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <TimerFlag>
		TimerFlag = 0;
 228:	f5 cf       	rjmp	.-22     	; 0x214 <main+0x12>

0000022a <_exit>:
		//Note: For the above a better style would use a synchSM with TickSM()
		//This example just illustrates the use of the ISR and flag
	}
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
